package Analizador;

import java_cup.runtime.Symbol;

parser code
{:
    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}
:};

terminal Int, Linea, Comillas, Comillas_S, T_datoN, Cadena, Vacio, Nulo, Include,
    If, Else, Do, While, For, Switch, Case, Break, Default, Print, Scan, Gets,
    Return, Unsigned, System, SizeOf, Igual, Suma, Resta, Multiplicacion, 
    Division, Modulo, Op_logico, Op_relacional, Op_atribucion, Op_incremento, 
    Op_booleano, Numeral, Parentesis_a, Parentesis_c, Llave_a, Llave_c, Corchete_a,
    Corchete_c, Main, P_coma, Dos_P, Punto, Identificador, Numero, Sistema, ERROR;
non terminal INICIO, SENTENCIA, DECLARACION, DECLARACION_FOR, IF, IF_ELSE,
    WHILE, DO_WHILE, FOR, SENTENCIA_BOOLEANA, SENTENCIA_FOR,
    SWITCH, PRINT, INCLUDE;

start with INCLUDE;

INCLUDE ::= 
    Numeral Include Op_relacional Identificador Punto Identificador Op_relacional P_coma |
    Numeral Include Comillas Identificador Punto Identificador Comillas P_coma
;

INICIO ::= 
    Int Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c |
    Main Parentesis_a Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA ::= 
    SENTENCIA DECLARACION |
    DECLARACION |
    SENTENCIA IF | 
    IF |
    SENTENCIA IF_ELSE |
    IF_ELSE |
    SENTENCIA WHILE |
    WHILE |
    SENTENCIA DO_WHILE |
    DO_WHILE |
    SENTENCIA FOR |
    FOR |
    SENTENCIA SWITCH |
    SWITCH |
    SENTENCIA PRINT |
    PRINT |
    INCLUDE
;
DECLARACION ::= 
    T_datoN Identificador P_coma | 
    T_datoN Identificador Op_atribucion Numero P_coma |
    T_datoN Identificador Igual Numero P_coma |
    T_datoN Identificador Op_incremento P_coma | 
    T_datoN Op_incremento Identificador P_coma | 
    Cadena Identificador Op_atribucion Comillas Comillas P_coma |
    Cadena Identificador Igual Comillas Comillas P_coma |
    Cadena Identificador Op_atribucion Comillas Identificador Comillas P_coma |
    Cadena Identificador Igual Comillas Identificador Comillas P_coma
;
IF ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_BOOLEANA ::= 
    Op_booleano | 
    Identificador Op_relacional Op_booleano |
    Identificador Op_relacional Numero |
    Identificador Op_relacional Identificador |
    Identificador Op_relacional Comillas Comillas |
    Identificador Op_relacional Comillas Identificador Comillas
;
IF_ELSE ::= If Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c Else Llave_a SENTENCIA Llave_c
;
WHILE ::= While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c Llave_a SENTENCIA Llave_c
;
DO_WHILE ::= Do Llave_a SENTENCIA Llave_c While Parentesis_a SENTENCIA_BOOLEANA Parentesis_c P_coma
;
FOR ::= For Parentesis_a SENTENCIA_FOR Parentesis_c Llave_a SENTENCIA Llave_c
;
SENTENCIA_FOR ::=
    T_datoN Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR |
    Identificador Igual Numero P_coma SENTENCIA_BOOLEANA P_coma DECLARACION_FOR
;
DECLARACION_FOR ::= 
    Identificador Op_atribucion Numero |
    Identificador Op_incremento | 
    Op_incremento Identificador
;

SWITCH ::= Switch Parentesis_a Identificador Parentesis_c Llave_a Case Identificador Dos_P SENTENCIA Break P_coma Case Identificador Dos_P SENTENCIA Break P_coma Default Dos_P SENTENCIA Break P_coma Llave_c
;

PRINT ::= 
    Print Parentesis_a Identificador Parentesis_c P_coma |
    Print Parentesis_a Comillas Identificador Parentesis_c Comillas P_coma
;
